var store = [{
        "title": "Getting Started With Cpp",
        "excerpt":" title: ‚ÄúFoo Bar Identity‚Äù excerpt: ‚ÄúFoo Bar design system including logo mark, website design, and branding applications.‚Äù   Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn‚Äôt a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.              This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you‚Äôll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn‚Äôt a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "/Unreal%20Engine%205/getting-started-with-cpp/",
        "teaser": null
      },{
        "title": "Deploying Unity Game Server Into Playfab Cloud",
        "excerpt":"Microsoft Azure PlayFab service is a great way to host your multiplayer game and manage player data. With Azure PlayFab, game developers can leverage cloud-based infrastructure and services to scale their games and provide an optimal experience for players. In this guide, I will take you through the steps involved in deploying your Unity Linux game server on the PlayFab service, all at no cost.   Prerequisites:      Supports both Mirror and Fishnet   Server is set up in a Linux container.   Dev machine: Windows 10/11   Needs a PlayFab Account with payments setup (you wont be charged)   Initial setup:  Machine and Project Setup: (Windows 10/11)      Enable WSL2 and install Ubuntu distro. More info: Set up your Windows development device - PlayFab | Microsoft Docs   Install and setup Docker for wsl2 and make sure it‚Äôs running Linux Containers   Add Linux Build support module to your Unity Engine Installation   Access to the game‚Äôs PlayFab developer account and its docker ‚ÄúAzure container registry‚Äù credentials for a new build.   Make sure your project has Unity C# SDKs for PlayFab and UnityGsdk (Playfab game server SDK for unity) setup and the api‚Äôs have already been integrated. (Sample server script &amp; client script)   Setup either mirror or fishnet in the project, and add their network managers into the scene   Network Manager Setup for Mirror:           Create a new custom network manager as a inherited child class of mirrors network manager and add the KCP transport component into the same gameobject, which inturn uses UDP protocol            Add a simple switch in the custom network manager like in the below image and set up all other necessary events like OnClientJoined etc in the script.             Add server and client listener scripts as child of the network manager gameobject   Network Manager Setup for Fishnet:           Create a new custom network manager script, similar to the above mirror one.            Add fishnet‚Äôs network manager as the child of the above gameobject along with it‚Äôs tugboat transport component               Add server and client listener scripts for playfab as child of custom network manager gameobject   Build and Deploy:  Building the headless server:     Switch to Dedicated-Server Build mode and Select Linux as Target Platform    In Custom networkManager, switch Build type to REMOTE_SERVER (which in turn enables the agent-listener script)    Build the game and once build complete, create docker file in the build‚Äôs parent directory  Create a Dockerfile - PlayFab | Microsoft Docs Directory and file should look something like the below image and the parent directory shouldn‚Äôt have any other files/directories except the dockerfile and game directory  (Note: Exclude the ‚ÄúServerX_BurstDebugInformation_DoNotShip‚Äù Directory before creating the docker image of build folder.)        Creating and Deploying the Docker Image:     Copy the Docker Creds from PlayFab developer account     In your windows machine, open the ubuntu terminal (not windows cmd),   move to the directory which contains the previously created Dockerfile,     cd mnt/c/Code/Kevuru/battle-axes/Builds/server5/           run the login command     docker login -u &lt;username_here&gt; -p &lt;password_here&gt; &lt;url_here&gt;*           run the build docker image command     docker build -t &lt;url_here&gt;/battleaxes_server:v1 .           Note: there is a . in the end of above command which means all files in the directory and increment v1 (vX) based on previously uploaded version)*      Now before pushing this image to the cloud, test it locally by following these steps.   run the push docker build to cloud command     docker push &lt;url_here&gt;/battleaxes_server:v1           Testing the headless server:   Testing locally using playfab‚Äôs MpsLocalAgent:      Download the localAgent that‚Äôs required for testing playfab builds locally. Url: Releases ¬∑ PlayFab/MpsAgent ¬∑ GitHub   Setup the **MultiplayerSettings.json **file in the downloaded directory. more_info: Debug Container-based game servers using LocalMultiplayerAgent | Microsoft Docs   The file should look something like this in the end:         Now open windows terminal in the downloaded directory and run command:     .\\LocalMultiplayerAgent.exe -lcow           Note: lcow stands for Linux Containers On Windows      Once the local server goes to ‚Äúactive‚Äù, connect a local client with ip: 127.0.0.1 and port 56100   Using SSH into running cloud server:      Click on ‚ÄúConnect to Virtual Machine‚Äù in builds of playfab developer console   Open your windows terminal and Run the ssh command     ssh &lt;id_here&gt;@&lt;ip_here&gt; -p &lt;port_here&gt;           Run the Docker ps to get current running container info     sudo docker ps -a           Get current server logs by cmd:     sudo docker logs &lt;docker_container_id&gt;           Testing locally using ParrelSync and three Unity editor instances:     Setup ParrelSync in the project GitHub - VeriorPies/ParrelSync: (Unity3D) Test multiplayer without building   Have three editor instance running, one will be playfab_server and the other two will be playfab_clients (not local clients),   Join the server from other clients using the default local host ip address (0.0.0.0) and default local port.   Common issues:      If you get an error called: ‚ÄúYou must set PlayFabSettings.TitleId before making API Calls.‚Äù you can get the title id from playfab developer console.         If you get this error ‚Äúnetwork playfab not found‚Äù Open ‚ÄúSetupLinuxContainersOnWindows.ps1‚Äù in LocalMultiplayerAgentPublish you just downloaded and run this ‚Äúdocker network create playfab ‚Äìdriver bridge‚Äù  in your linux distribution .   Connecting to our playfab game server as client:  Client Build Setup:     Switch back to whatever target platform you were previously in from the dedicated server platform.   In Custom networkManager, switch Build type to PLAYFAB_CLIENT (which in turn enables the client-startup script)         In the playfab dashboard, click on the ‚Äúrequest server‚Äù, when you have standby servers, and then Get the ip address, port and build id from the playfab console on the website.         Make sure you have the right build-id, ipaddress, port **and **region set in the custom network manager or the network manager script and save scene for all clients         Now with server already running, Click on Start game from clients in UnityEditor, and this should connect them all together.         Now open a second client and click on ‚ÄúJoin Game‚Äù button, enter the configuration you received above      Multiple instances:   Inspecting multiple instances in same VM:     Containers use ‚Äúplayfab‚Äù network plugins, to inspect the instances in the machine run:     docker inspect network playfab           More details: Connecting clients to game servers - PlayFab | Microsoft Learn     ","categories": [],
        "tags": [],
        "url": "/Unity/Deploying-Unity-Game-Server-Into-Playfab-Cloud/",
        "teaser": "https://res.cloudinary.com/dwfkishzf/image/upload/c_scale,w_627/v1676878048/Blogsite1/unity/deployingtocloud/image_0_ggiwyx.png"
      },{
    "title": null,
    "excerpt":"     404     Page not found :(    The requested page could not be found.   ","url": "http://localhost:4000/404.html"
  },{
    "title": null,
    "excerpt":" ","url": "http://localhost:4000/about/"
  },{
    "title": null,
    "excerpt":"üåüüååüíªüõ∏ü™Çüç∫üåçü¶ï   ","url": "http://localhost:4000/"
  },{
    "title": null,
    "excerpt":"","url": "http://localhost:4000/blog/"
  },{
    "title": null,
    "excerpt":"var idx = lunr(function () {   this.field('title')   this.field('excerpt')   this.field('categories')   this.field('tags')   this.ref('id')    this.pipeline.remove(lunr.trimmer)    for (var item in store) {     this.add({       title: store[item].title,       excerpt: store[item].excerpt,       categories: store[item].categories,       tags: store[item].tags,       id: item     })   } });  $(document).ready(function() {   $('input#search').on('keyup', function () {     var resultdiv = $('#results');     var query = $(this).val().toLowerCase();     var result =       idx.query(function (q) {         query.split(lunr.tokenizer.separator).forEach(function (term) {           q.term(term, { boost: 100 })           if(query.lastIndexOf(\" \") != query.length-1){             q.term(term, {  usePipeline: false, wildcard: lunr.Query.wildcard.TRAILING, boost: 10 })           }           if (term != \"\"){             q.term(term, {  usePipeline: false, editDistance: 1, boost: 1 })           }         })       });     resultdiv.empty();     resultdiv.prepend(''+result.length+' Result(s) found ');     for (var item in result) {       var ref = result[item].ref;       if(store[ref].teaser){         var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+                 ''+               ''+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       else{     \t  var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       resultdiv.append(searchitem);     }   }); }); ","url": "http://localhost:4000/assets/js/lunr/lunr-en.js"
  },{
    "title": null,
    "excerpt":"step1list = new Array(); step1list[\"Œ¶ŒëŒìŒôŒë\"] = \"Œ¶Œë\"; step1list[\"Œ¶ŒëŒìŒôŒüŒ•\"] = \"Œ¶Œë\"; step1list[\"Œ¶ŒëŒìŒôŒ©Œù\"] = \"Œ¶Œë\"; step1list[\"Œ£ŒöŒëŒìŒôŒë\"] = \"Œ£ŒöŒë\"; step1list[\"Œ£ŒöŒëŒìŒôŒüŒ•\"] = \"Œ£ŒöŒë\"; step1list[\"Œ£ŒöŒëŒìŒôŒ©Œù\"] = \"Œ£ŒöŒë\"; step1list[\"ŒüŒõŒüŒìŒôŒüŒ•\"] = \"ŒüŒõŒü\"; step1list[\"ŒüŒõŒüŒìŒôŒë\"] = \"ŒüŒõŒü\"; step1list[\"ŒüŒõŒüŒìŒôŒ©Œù\"] = \"ŒüŒõŒü\"; step1list[\"Œ£ŒüŒìŒôŒüŒ•\"] = \"Œ£Œü\"; step1list[\"Œ£ŒüŒìŒôŒë\"] = \"Œ£Œü\"; step1list[\"Œ£ŒüŒìŒôŒ©Œù\"] = \"Œ£Œü\"; step1list[\"Œ§ŒëŒ§ŒüŒìŒôŒë\"] = \"Œ§ŒëŒ§Œü\"; step1list[\"Œ§ŒëŒ§ŒüŒìŒôŒüŒ•\"] = \"Œ§ŒëŒ§Œü\"; step1list[\"Œ§ŒëŒ§ŒüŒìŒôŒ©Œù\"] = \"Œ§ŒëŒ§Œü\"; step1list[\"ŒöŒ°ŒïŒëŒ£\"] = \"ŒöŒ°Œï\"; step1list[\"ŒöŒ°ŒïŒëŒ§ŒüŒ£\"] = \"ŒöŒ°Œï\"; step1list[\"ŒöŒ°ŒïŒëŒ§Œë\"] = \"ŒöŒ°Œï\"; step1list[\"ŒöŒ°ŒïŒëŒ§Œ©Œù\"] = \"ŒöŒ°Œï\"; step1list[\"Œ†ŒïŒ°ŒëŒ£\"] = \"Œ†ŒïŒ°\"; step1list[\"Œ†ŒïŒ°ŒëŒ§ŒüŒ£\"] = \"Œ†ŒïŒ°\"; step1list[\"Œ†ŒïŒ°ŒëŒ§Œë\"] = \"Œ†ŒïŒ°\"; step1list[\"Œ†ŒïŒ°ŒëŒ§Œ©Œù\"] = \"Œ†ŒïŒ°\"; step1list[\"Œ§ŒïŒ°ŒëŒ£\"] = \"Œ§ŒïŒ°\"; step1list[\"Œ§ŒïŒ°ŒëŒ§ŒüŒ£\"] = \"Œ§ŒïŒ°\"; step1list[\"Œ§ŒïŒ°ŒëŒ§Œë\"] = \"Œ§ŒïŒ°\"; step1list[\"Œ§ŒïŒ°ŒëŒ§Œ©Œù\"] = \"Œ§ŒïŒ°\"; step1list[\"Œ¶Œ©Œ£\"] = \"Œ¶Œ©\"; step1list[\"Œ¶Œ©Œ§ŒüŒ£\"] = \"Œ¶Œ©\"; step1list[\"Œ¶Œ©Œ§Œë\"] = \"Œ¶Œ©\"; step1list[\"Œ¶Œ©Œ§Œ©Œù\"] = \"Œ¶Œ©\"; step1list[\"ŒöŒëŒòŒïŒ£Œ§Œ©Œ£\"] = \"ŒöŒëŒòŒïŒ£Œ§\"; step1list[\"ŒöŒëŒòŒïŒ£Œ§Œ©Œ§ŒüŒ£\"] = \"ŒöŒëŒòŒïŒ£Œ§\"; step1list[\"ŒöŒëŒòŒïŒ£Œ§Œ©Œ§Œë\"] = \"ŒöŒëŒòŒïŒ£Œ§\"; step1list[\"ŒöŒëŒòŒïŒ£Œ§Œ©Œ§Œ©Œù\"] = \"ŒöŒëŒòŒïŒ£Œ§\"; step1list[\"ŒìŒïŒìŒüŒùŒüŒ£\"] = \"ŒìŒïŒìŒüŒù\"; step1list[\"ŒìŒïŒìŒüŒùŒüŒ§ŒüŒ£\"] = \"ŒìŒïŒìŒüŒù\"; step1list[\"ŒìŒïŒìŒüŒùŒüŒ§Œë\"] = \"ŒìŒïŒìŒüŒù\"; step1list[\"ŒìŒïŒìŒüŒùŒüŒ§Œ©Œù\"] = \"ŒìŒïŒìŒüŒù\";  v = \"[ŒëŒïŒóŒôŒüŒ•Œ©]\"; v2 = \"[ŒëŒïŒóŒôŒüŒ©]\"  function stemWord(w) {   var stem;   var suffix;   var firstch;   var origword = w;   test1 = new Boolean(true);    if(w.length '+result.length+' Result(s) found ');     for (var item in result) {       var ref = result[item].ref;       if(store[ref].teaser){         var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+                 ''+               ''+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       else{     \t  var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       resultdiv.append(searchitem);     }   }); }); ","url": "http://localhost:4000/assets/js/lunr/lunr-gr.js"
  },{
    "title": null,
    "excerpt":"var store = [   {%- for c in site.collections -%}     {%- if forloop.last -%}       {%- assign l = true -%}     {%- endif -%}     {%- assign docs = c.docs | where_exp:'doc','doc.search != false' -%}     {%- for doc in docs -%}       {%- if doc.header.teaser -%}         {%- capture teaser -%}{{ doc.header.teaser }}{%- endcapture -%}       {%- else -%}         {%- assign teaser = site.teaser -%}       {%- endif -%}       {         \"title\": {{ doc.title | jsonify }},         \"excerpt\":           {%- if site.search_full_content == true -%}             {{ doc.content | newline_to_br |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \"|             strip_html | strip_newlines | jsonify }},           {%- else -%}             {{ doc.content | newline_to_br |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \"|             strip_html | strip_newlines | truncatewords: 50 | jsonify }},           {%- endif -%}         \"categories\": {{ doc.categories | jsonify }},         \"tags\": {{ doc.tags | jsonify }},         \"url\": {{ doc.url | relative_url | jsonify }},         \"teaser\": {{ teaser | relative_url | jsonify }}       }{%- unless forloop.last and l -%},{%- endunless -%}     {%- endfor -%}   {%- endfor -%}{%- if site.lunr.search_within_pages -%},   {%- assign pages = site.pages | where_exp:'doc','doc.search != false' -%}   {%- for doc in pages -%}     {%- if forloop.last -%}       {%- assign l = true -%}     {%- endif -%}   {     \"title\": {{ doc.title | jsonify }},     \"excerpt\":         {%- if site.search_full_content == true -%}           {{ doc.content | newline_to_br |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \"|           strip_html | strip_newlines | jsonify }},         {%- else -%}           {{ doc.content | newline_to_br |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \"|           strip_html | strip_newlines | truncatewords: 50 | jsonify }},         {%- endif -%}       \"url\": {{ doc.url | absolute_url | jsonify }}   }{%- unless forloop.last and l -%},{%- endunless -%}   {%- endfor -%} {%- endif -%}] ","url": "http://localhost:4000/assets/js/lunr/lunr-store.js"
  },{
    "title": "Looks like you're offline",
    "excerpt":"It appears that you've lost your network connection and this document doesn't exist on your device.  Try either returning to the previous page, using the navigation to find your way back, or restore your network connection. ","url": "http://localhost:4000/offline/"
  },{
    "title": "Unreal Engine 5",
    "excerpt":"","url": "http://localhost:4000/ue5/"
  },{
    "title": "Unity",
    "excerpt":"","url": "http://localhost:4000/unity/"
  },{
    "title": null,
    "excerpt":"{}","url": "http://localhost:4000/redirects.json"
  },{
    "title": null,
    "excerpt":"{% if page.xsl %}{% endif %}Jekyll{{ site.time | date_to_xmlschema }}{{ page.url | absolute_url | xml_escape }}{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}{{ title | smartify | xml_escape }}{% endif %}{% if site.description %}{{ site.description | xml_escape }}{% endif %}{% if site.author %}{{ site.author.name | default: site.author | xml_escape }}{% if site.author.email %}{{ site.author.email | xml_escape }}{% endif %}{% if site.author.uri %}{{ site.author.uri | xml_escape }}{% endif %}{% endif %}{% if page.tags %}{% assign posts = site.tags[page.tags] %}{% else %}{% assign posts = site[page.collection] %}{% endif %}{% if page.category %}{% assign posts = posts | where: \"category\", page.category %}{% endif %}{% unless site.show_drafts %}{% assign posts = posts | where_exp: \"post\", \"post.draft != true\" %}{% endunless %}{% assign posts = posts | sort: \"date\" | reverse %}{% assign posts_limit = site.feed.posts_limit | default: 10 %}{% for post in posts limit: posts_limit %}{% assign post_title = post.title | smartify | strip_html | normalize_whitespace | xml_escape %}{{ post_title }}{{ post.date | date_to_xmlschema }}{{ post.last_modified_at | default: post.date | date_to_xmlschema }}{{ post.id | absolute_url | xml_escape }}{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}{{ post.content | strip | xml_escape }}{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}{{ post_author_name | default: \"\" | xml_escape }}{% if post_author_email %}{{ post_author_email | xml_escape }}{% endif %}{% if post_author_uri %}{{ post_author_uri | xml_escape }}{% endif %}{% if post.category %}{% elsif post.categories %}{% for category in post.categories %}{% endfor %}{% endif %}{% for tag in post.tags %}{% endfor %}{% if post.excerpt and post.excerpt != empty %}{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}{% endif %}{% endfor %}","url": "http://localhost:4000/feed.xml"
  },{
    "title": null,
    "excerpt":" {% if page.xsl %} {% endif %} {% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %} {{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }} {% if doc.last_modified_at or doc.date %}{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }} {% endif %} {% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %} {{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }} {% if page.last_modified_at %}{{ page.last_modified_at | date_to_xmlschema }} {% endif %} {% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %} {{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }} {{ file.modified_time | date_to_xmlschema }}  {% endfor %} ","url": "http://localhost:4000/sitemap.xml"
  },{
    "title": null,
    "excerpt":"Sitemap: {{ \"sitemap.xml\" | absolute_url }} ","url": "http://localhost:4000/robots.txt"
  }]
