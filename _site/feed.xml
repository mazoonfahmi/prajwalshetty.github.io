<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-21T02:50:22+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Prajwal Shetty</title><subtitle>A game developer with 5 years of experience in the industry. I specialize in game programming and 3D math, with expertise in Unity, Unreal Engine 5, and Blender Python API. I have a particular interest in open-world games and virtual worlds, and I love creating immersive experiences that transport players to new and exciting places. In my spare time, I enjoy staying up-to-date with the latest developments in technology and exploring new programming concepts. On this blog, I share my thoughts and insights on game development, programming, and tech. Whether you're a fellow game developer, a tech enthusiast, or just someone looking for a good read, I hope you'll find something of interest here. As well as my professional interests, I also have a passion for travel and exploring new places. You may find the occasional post about my adventures, and how they inspire my work. I love to write and believe that blogging is an excellent way to express my thoughts and ideas. I hope you'll find my writing engaging, informative, and thought-provoking. Thanks for stopping by!</subtitle><author><name>Prajwal Shetty</name><email>mail@prajwalshetty.com</email></author><entry><title type="html">Compilation of the best Unreal Engine C++ resources for learning threading, networking, and more</title><link href="http://localhost:4000/ue5/Useful-Unreal-Links/" rel="alternate" type="text/html" title="Compilation of the best Unreal Engine C++ resources for learning threading, networking, and more" /><published>2024-08-25T00:00:00+01:00</published><updated>2024-08-25T00:00:00+01:00</updated><id>http://localhost:4000/ue5/Useful-Unreal-Links</id><content type="html" xml:base="http://localhost:4000/ue5/Useful-Unreal-Links/">&lt;p&gt;Here’s a compilation of all the must-have Unreal Engine links for quick reference. This is a collection I’ve curated throughout my Unreal journey, covering those tricky C++ quirks, multiplayer setup, multithreading, performance optimization, and more. The official Unreal docs often fall short on these advanced topics, and these links have saved me countless hours of digging around. Trust me, they’re gold.&lt;/p&gt;

&lt;h2 id=&quot;tom-loomans-unreal-engine-c-complete-guide&quot;&gt;Tom Looman’s Unreal Engine C++ Complete Guide:&lt;/h2&gt;
&lt;figure class=&quot;&quot;&gt;&lt;a href=&quot;https://www.tomlooman.com/unreal-engine-cpp-guide/&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/v1724630940/Blogsite1/Unreal/ce4ec66c-dde1-4727-99b2-2ff67fd9f58b.png&quot; alt=&quot;Tom Looman's Unreal Engine C++ Complete Guide&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;This is a great guide to get you started with Unreal Engine 5 c++. It covers everything from setting up your development environment to creating your first c++ class. 
Topics covered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TSet, TMap, TArray, TSharedPtr, TWeakPtr, TSharedRef, TWeakRef&lt;/li&gt;
  &lt;li&gt;UObject, UClass, UFunction, UProperty, UEnum, UStruct&lt;/li&gt;
  &lt;li&gt;Delegates, MulticastDelegates, TScriptDelegate, TMulticastScriptDelegate&lt;/li&gt;
  &lt;li&gt;Interfaces, Asserts, Casting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://www.tomlooman.com/unreal-engine-cpp-guide/&quot; target=&quot;_blank&quot;&gt;Tom Looman’s full cpp guide&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;multiplayer-network-compendium-by-cedric-neukirchen&quot;&gt;Multiplayer Network Compendium by Cedric Neukirchen:&lt;/h2&gt;
&lt;figure class=&quot;&quot;&gt;&lt;a href=&quot;https://cedric-neukirchen.net/docs/category/multiplayer-network-compendium/&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/t_cropped/v1724631112/Blogsite1/Unreal/f0c3a0c9-310c-40d3-a44e-92162987796c.png&quot; alt=&quot;Multiplayer Network Compendium by Cedric Neukirchen&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;One of the best resources for learning Unreal Engine multiplayer network programming. Nothing else comes close to the depth and quality of this resource.
Topics covered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Replication, Ownership, Authority, Prediction, Replication Graph&lt;/li&gt;
  &lt;li&gt;Dedicated Server, Listen Server&lt;/li&gt;
  &lt;li&gt;Networking in Unreal Engine&lt;/li&gt;
  &lt;li&gt;Gameplay Framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://cedric-neukirchen.net/docs/category/multiplayer-network-compendium/&quot; target=&quot;_blank&quot;&gt;Multiplayer Network Compendium&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ben-uis-unreal-engine-c-tutorials&quot;&gt;Ben UI’s Unreal Engine C++ Tutorials:&lt;/h2&gt;
&lt;figure class=&quot;&quot;&gt;&lt;a href=&quot;https://benui.ca/unreal/&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/v1724631314/Blogsite1/Unreal/52060a73-daf3-4780-b4f9-788aa0777ac2.png&quot; alt=&quot;Ben UI's Unreal Engine C++ Tutorials&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;I mean there can’t be a Unreal Resources list without Ben Ui’s tutorials. It’s one of the best resources for learning Unreal Engine c++ and lot of its quirks.
Topics covered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;UI, UI Animation, Widget Blueprints&lt;/li&gt;
  &lt;li&gt;Gameplay Abilities, Gameplay Tags, Gameplay Effects&lt;/li&gt;
  &lt;li&gt;Coding Standards, Best Practices&lt;/li&gt;
  &lt;li&gt;UProperty, UFunction, UEnum, UStruct&lt;/li&gt;
  &lt;li&gt;TMaps, TSet, TArray, TSharedPtr, TWeakPtr, TSharedRef, TWeakRef&lt;/li&gt;
  &lt;li&gt;Delegates, MulticastDelegates, TScriptDelegate&lt;/li&gt;
  &lt;li&gt;Test Cases, Lambdas, Macros&lt;/li&gt;
  &lt;li&gt;Metadata Specifiers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://benui.ca/unreal/&quot; target=&quot;_blank&quot;&gt;Ben UI’s Unreal Engine C++ Tutorials&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pointers-in-unreal-engine-by-dawn-arc&quot;&gt;Pointers in Unreal Engine, by Dawn Arc:&lt;/h2&gt;
&lt;figure class=&quot;&quot;&gt;&lt;a href=&quot;https://dawnarc.com/2018/07/ue4-tsharedptr-tweakobjectptr-and-tuniqueptr/&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/v1724631417/Blogsite1/Unreal/7dbff722-d3e1-44f6-bbc8-1569e66a6c17.png&quot; alt=&quot;Pointers in Unreal Engine, by Dawn Arc&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Helpful for understanding how Unreal Engine handles pointers and memory management.
Topics covered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TSharedPtr, TWeakPtr, TWeakObjectPtr&lt;/li&gt;
  &lt;li&gt;TUniquePtr, TUniquePtr&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://dawnarc.com/2018/07/ue4-tsharedptr-tweakobjectptr-and-tuniqueptr/&quot; target=&quot;_blank&quot;&gt;Pointers in Unreal Engine&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ari-arnbjörnssons-unreal-engine-c-tips-and-tricks&quot;&gt;Ari Arnbjörnsson’s Unreal Engine C++ Tips and Tricks:&lt;/h2&gt;
&lt;figure class=&quot;&quot;&gt;&lt;a href=&quot;https://flassari.notion.site/UE-Tips-Best-Practices-3ff4c3297b414a66886c969ff741c5ba&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/v1724631487/Blogsite1/Unreal/e9a3dfa7-adc3-4445-a186-309e28861797.png&quot; alt=&quot;Ari Arnbjörnsson's Unreal Engine C++ Tips and Tricks&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;One of the best resources for learning Unreal Engine c++ tips and tricks. Also checkout his other related resources in the same link by going to the “@Ari’s Unreal Engine Notes” tab.
Topics covered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Editor Usability, Performance, Reflection&lt;/li&gt;
  &lt;li&gt;Cooking, Conventions, Debugging&lt;/li&gt;
  &lt;li&gt;Profiling, Memory&lt;/li&gt;
  &lt;li&gt;Garbage Collection, Tooling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://flassari.notion.site/UE-Tips-Best-Practices-3ff4c3297b414a66886c969ff741c5ba&quot; target=&quot;_blank&quot;&gt;Ari Arnbjörnsson Tips and Tricks&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;multiplayer-tips-and-tricks-by-wizardcell&quot;&gt;Multiplayer Tips and Tricks by WizardCell:&lt;/h2&gt;
&lt;figure class=&quot;&quot;&gt;&lt;a href=&quot;https://wizardcell.com/unreal/multiplayer-tips-and-tricks/&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/v1724631517/Blogsite1/Unreal/5c067c03-3ebe-4d8d-950d-e9fcd83eda61.png&quot; alt=&quot;Multiplayer Tips and Tricks by WizardCell&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Another great resource for learning Unreal Engine multiplayer network programming.
Topics covered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;NetRole, NetMode, NetConnection&lt;/li&gt;
  &lt;li&gt;Client Execution Paths&lt;/li&gt;
  &lt;li&gt;RPCs tips and tricks&lt;/li&gt;
  &lt;li&gt;Reliability, Replication, and Prediction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://wizardcell.com/unreal/multiplayer-tips-and-tricks/&quot; target=&quot;_blank&quot;&gt;Multiplayer Tips and Tricks&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;multithreading-and-unreal-by-guneet-sasan&quot;&gt;Multithreading and Unreal by Guneet Sasan:&lt;/h2&gt;
&lt;figure class=&quot;&quot;&gt;&lt;a href=&quot;https://www.guneetsasan.com/home/multithreading-unreal&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/v1724631546/Blogsite1/Unreal/a2e410e3-61f2-4d59-9e0d-899c01912cd8.png&quot; alt=&quot;Multithreading and Unreal by Guneet Sasan&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Explains different multithreading concepts in Unreal Engine and how to implement them really well.
Topics covered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;FRunnable&lt;/li&gt;
  &lt;li&gt;Task Graph System&lt;/li&gt;
  &lt;li&gt;Async Tasks&lt;/li&gt;
  &lt;li&gt;ParallelFor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://www.guneetsasan.com/home/multithreading-unreal&quot; target=&quot;_blank&quot;&gt;Multithreading and Unreal&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;task-system-in-unreal-engine-by-epic-games&quot;&gt;Task system in Unreal Engine by Epic Games:&lt;/h2&gt;
&lt;figure class=&quot;&quot;&gt;&lt;a href=&quot;https://dev.epicgames.com/documentation/en-us/unreal-engine/tasks-systems-in-unreal-engine&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/c_scale,q_80,w_1208/v1724631627/Blogsite1/Unreal/5075c831-ad9a-4610-9213-e9bf88250279.webp&quot; alt=&quot;Task system in Unreal Engine by Epic Games&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Finally something from Epic Games themselves. Official documentation on the task system in Unreal Engine.
Topics covered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Tasks System&lt;/li&gt;
  &lt;li&gt;Nested Tasks, Busy-waiting&lt;/li&gt;
  &lt;li&gt;Pipes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://dev.epicgames.com/documentation/en-us/unreal-engine/tasks-systems-in-unreal-engine&quot; target=&quot;_blank&quot;&gt;Multithreading and Unreal&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;logging-in-unreal-engine-by-chris-mccole&quot;&gt;Logging in Unreal Engine by Chris McCole:&lt;/h2&gt;
&lt;figure class=&quot;&quot;&gt;&lt;a href=&quot;https://www.chrismccole.com/blog/logging-in-ue4-cpp&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/v1724631664/Blogsite1/Unreal/e1595dbc-154a-4506-bfb5-f5fab1dcd849.png&quot; alt=&quot;Logging in Unreal Engine by Chris McCole&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;As the title suggests, this is a great resource for learning how to log in Unreal Engine C++.
Topics covered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;UE_LOG&lt;/li&gt;
  &lt;li&gt;On Screen Logging&lt;/li&gt;
  &lt;li&gt;Custom Logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://www.chrismccole.com/blog/logging-in-ue4-cpp&quot; target=&quot;_blank&quot;&gt;Logging in Unreal Engine&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;unreal-c-speedrun-by-laura&quot;&gt;Unreal C++ speedrun By Laura:&lt;/h2&gt;
&lt;figure class=&quot;&quot;&gt;&lt;a href=&quot;https://landelare.github.io/2023/01/07/cpp-speedrun.html&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/v1724631713/Blogsite1/Unreal/fb574f21-6239-4513-a2d9-f8279dcafc63.png&quot; alt=&quot;Unreal C++ speedrun By Laura&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Laura is a game developer who has a knack for creating educational content. This is a great resource for learning Unreal Engine C++ by doing.
Topics covered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Unreal Type System&lt;/li&gt;
  &lt;li&gt;Functions, Macros, Structs, Classes, Enums, Arrays, Maps, Sets, Pointers&lt;/li&gt;
  &lt;li&gt;Threading&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://landelare.github.io/2023/01/07/cpp-speedrun.html&quot; target=&quot;_blank&quot;&gt;Unreal C++ speedrun&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;instanced-static-meshes-by-suvam&quot;&gt;Instanced Static Meshes by Suvam&lt;/h2&gt;
&lt;figure class=&quot;&quot;&gt;&lt;a href=&quot;https://suvam0451.github.io/tutorials/ue4/instanced-static-meshes&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/v1732156723/Blogsite1/Unreal/5f3a17ce-8397-4773-8467-6acbdadbcc9b.png&quot; alt=&quot;Unreal C++ speedrun By Laura&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The website layout is a bit outdated but the content is very good and relevant.
Topics covered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Instanced Static Meshes&lt;/li&gt;
  &lt;li&gt;Hierarchial Instance Static Mesh&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://suvam0451.github.io/tutorials/ue4/instanced-static-meshes&quot; target=&quot;_blank&quot;&gt;Instanced Static Meshes&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-unreal-renders-a-frame-by-kostas-anagnostou&quot;&gt;How Unreal Renders a Frame by Kostas Anagnostou&lt;/h2&gt;
&lt;figure class=&quot;&quot;&gt;&lt;a href=&quot;https://interplayoflight.wordpress.com/2017/10/25/how-unreal-renders-a-frame/&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/v1732157006/Blogsite1/Unreal/20c3a9ba-140c-4690-8a4a-1a1dabc8b0c2.png&quot; alt=&quot;Unreal C++ speedrun By Laura&quot; /&gt;&lt;/a&gt;&lt;figcaption&gt;
      

    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;As the name suggests it excellently sums up unreal’s rendering architecture and key terminologies. 
Topics covered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Testing for occlusion, Z-Prepass&lt;/li&gt;
  &lt;li&gt;Hi-Z buffer generation, Shadowmap rendering&lt;/li&gt;
  &lt;li&gt;G-Prepass, Volumetric Fog&lt;/li&gt;
  &lt;li&gt;Lighting, Ambient Occlusion&lt;/li&gt;
  &lt;li&gt;Transparency, Post processing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link: &lt;a href=&quot;https://interplayoflight.wordpress.com/2017/10/25/how-unreal-renders-a-frame/&quot; target=&quot;_blank&quot;&gt;Interplay of Light&lt;/a&gt;&lt;/p&gt;</content><author><name>Prajwal Shetty</name><email>mail@prajwalshetty.com</email></author><category term="UE5" /><category term="game" /><category term="unity" /><category term="unreal" /><summary type="html">Must-have Unreal Engine links for quick reference. This is a collection I've curated throughout my Unreal journey, covering those tricky C++ quirks, multiplayer setup, multithreading, performance optimization, and more. The official Unreal docs often fall short on these advanced topics, and these links have saved me countless hours of digging around. Trust me, they're gold.</summary></entry><entry><title type="html">Runtime mesh generation in Unreal Engine 5 - With LODs</title><link href="http://localhost:4000/ue5/Generating-Runtime-Mesh-In-Unreal-Engine/" rel="alternate" type="text/html" title="Runtime mesh generation in Unreal Engine 5 - With LODs" /><published>2023-08-30T00:00:00+01:00</published><updated>2023-08-30T00:00:00+01:00</updated><id>http://localhost:4000/ue5/Generating%20Runtime%20Mesh%20In%20Unreal%20Engine</id><content type="html" xml:base="http://localhost:4000/ue5/Generating-Runtime-Mesh-In-Unreal-Engine/">&lt;h1 id=&quot;runtime-mesh-generation-in-unreal-engine-5-c---with-lods&quot;&gt;Runtime mesh generation in Unreal Engine 5 (C++) - With LODs&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this blog we will go through two major techniques to generate runtime meshes in Unreal Engine 5. We will also look at how to generate LODs for these meshes. Generating meshes at runtime is a very powerful tool to have in your arsenal. It can be used to create procedural levels, terrain, foliage, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dwfkishzf/image/upload/c_scale,w_400/v1683140916/Traffic%20Tales/FvOcMeUWIAA8sSu_pnfhyh.png&quot; alt=&quot;image&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will discuss two ways to generate runtime meshes in Unreal Engine 5. The first one is using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Procedural Mesh Component&lt;/code&gt;. The second one is using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runtime Mesh Component&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  &lt;h4 class=&quot;no_toc&quot;&gt;Current Limitations:&lt;/h4&gt;
  
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;ProceduralMeshComponent&lt;/em&gt; does not support LODs&lt;/li&gt;
  &lt;li&gt;Both methods do not support “runtime mesh distance field generation”, which in-turn will effect the LUMEN in &amp;gt;=UE5.0&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;h2 id=&quot;procedural-mesh-component&quot;&gt;Procedural Mesh Component&lt;/h2&gt;
&lt;p&gt;Using Unreal Engine’s inbuilt mesh generation component is the easiest way to generate meshes at runtime. It is a component that can be added to any actor and can be used to generate meshes at runtime. It is also very easy to use. It has a few limitations though. It can only generate meshes with a single material. It also does not support LODs.&lt;/p&gt;

&lt;p&gt;The official documentation for the Procedural Mesh Component can be found &lt;a href=&quot;https://docs.unrealengine.com/5.2/en-US/API/Plugins/ProceduralMeshComponent/UProceduralMeshComponent/&quot;&gt;here&lt;/a&gt;. The documentation is very basic and does not cover all the functions. You can also go through the actual source code for more deep dive into the component.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-procedural-mesh-component&quot;&gt;Creating a Procedural Mesh Component&lt;/h3&gt;

&lt;p&gt;To use this component, include the “ProceduralMeshComponent” path in the build.cs file of your project:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PublicDependencyModuleNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;&quot;Core&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CoreUObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Engine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;InputCore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ProceduralMeshComponent&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, after 4.27, plugins can now depend on other plugins, so in case you are working on a plugin instead of a project, you will have to add this to your .uplugin file:&lt;/p&gt;

&lt;p&gt;Then include the header file in your cpp file:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ProceduralMeshComponent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Enabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UProceduralMeshComponent&lt;/code&gt; to your actor’s header file, and then initialize it in the constructor, just like any other component.&lt;/p&gt;

&lt;p&gt;Now let’s assume you have a function setup to generate your runtime mesh’s uv, vertices, triangles, normals, tangents, etc. Following is an example for such a function:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AThTerrain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenerateMesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LODMultiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandHeightMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;FThTerrainChunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// here y and x is used to calculate the vertex positions&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HalfLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HalfLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LODMultiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HalfLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HalfLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LODMultiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rangeX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HalfLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rangeY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HalfLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elevation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandHeightMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rangeY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rangeX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;FVector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vertex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandCellSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandCellSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			                         &lt;span class=&quot;n&quot;&gt;Elevation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandCellSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandHeightMultiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//setup vertex buffer&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;VertexBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;// Calculate UV coordinates based on the world space position of the vertex &lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HalfLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandCellSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
			            &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandCellSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextureTiling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HalfLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandCellSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
			            &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandCellSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextureTiling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;UVs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FVector2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//23ms&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;LOG_TIME_ELAPSED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StartTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UV and Vertices gen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;// Create triangles&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// here y and x is used to calculate the indexes of the vertices&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LODMultiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LODMultiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LODMultiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LODMultiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LODMultiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LODMultiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;// this is the index of the vertex at the bottom left corner of the quad,&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// calculated from the x and y indexes, ny is the row, nx is the column, &lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// nx multiplied by ny is the number of vertices in the previous rows,&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// and ny is the number of vertices in the current row&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Index00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRowWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;//using 1 instead of LODMultiplier here because the vertex buffer is smaller,&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//and it already has the LODMultiplier applied while its formation&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Index01&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRowWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Index10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRowWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Index11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRowWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;IndexBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Index01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;IndexBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Index10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;IndexBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Index11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		
			&lt;span class=&quot;n&quot;&gt;IndexBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Index00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;IndexBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Index10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;IndexBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Index01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly, you can also generate the normals and tangents for the mesh. Once you have all the data ready, you can use the following function to create the mesh:&lt;/p&gt;

&lt;p&gt;Once the mesh data is generated, you can use the following function from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UProceduralMeshComponent&lt;/code&gt; to create the mesh:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateMeshSection&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SectionIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FVector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Triangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FVector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Normals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FVector2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UV0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FVector2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UV1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FVector2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UV2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FVector2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UV3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VertexColors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FProcMeshTangent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tangents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bCreateCollision&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p class=&quot;notice--success&quot;&gt;&lt;em&gt;link to above code’s official documentation: &lt;a href=&quot;https://docs.unrealengine.com/5.3/en-US/API/Plugins/ProceduralMeshComponent/UProceduralMeshComponent/CreateMeshSection/2/&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;runtime-mesh-component&quot;&gt;Runtime Mesh Component&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/TriAxis-Games/RealtimeMeshComponent&quot; class=&quot;btn btn--inverse&quot;&gt;Github Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Runtime mesh component is an external plugin that can be used to generate meshes at runtime. It is a very powerful plugin that can be used to generate meshes with multiple materials and LODs. It is also very easy to use. But currently the documentation is not very good. So you will have to go through the source code to understand how to use it. The source code is very well documented and easy to understand.&lt;/p&gt;

&lt;p&gt;The RuntimeMeshComponent or more commonly known as RMC, is a replacement to the ProceduralMeshComponent (aka PMC) found in UE4. The RMC is much more efficient, and carries many more features, while allowing for a much more fine-grained approach for advanced use cases, while being simple to use just like the PMC. It can handle any use case from simply loading models at runtime, to debug views, to modification of existing models all the way up to procedural generation of entire worlds!&lt;/p&gt;

&lt;p&gt;The RMC has been around for 6+ years and has an active community of users from individuals, to schools, to Fortune 500 companies, with many released projects. You can also find active support in their Discord server here:  &lt;a href=&quot;https://discord.gg/KGvBBTv&quot; target=&quot;_blank&quot;&gt;https://discord.gg/KGvBBTv&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;creating-mesh-using-runtime-mesh-component&quot;&gt;Creating mesh using Runtime Mesh Component&lt;/h3&gt;

&lt;p&gt;To use this component, include the “RuntimeMeshComponent” path in the build.cs file of your project:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PublicDependencyModuleNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RealtimeMeshComponent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Also make sure you add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include &quot;RealtimeMeshSimple.h&quot;&lt;/code&gt; header file in your cpp file:&lt;/p&gt;

&lt;p&gt;Let’s assume you have a function setup to generate your runtime mesh’s uv, vertices, triangles, normals, tangents, etc. similar to the one we used for the PMC.&lt;/p&gt;

&lt;p&gt;Once the mesh data is generated, you can use the following function from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URuntimeMeshComponent&lt;/code&gt; to create the mesh:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;URealtimeMeshSimple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GeneratedMesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MeshComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InitializeRealtimeMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URealtimeMeshSimple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;FRealtimeMeshSimpleMeshData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LODMeshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LODMeshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Positions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VertexBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LODMeshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Triangles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LODMeshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Normals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LODMeshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UV0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UVs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LODMeshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tangents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tangents_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// binary logarithm (log base 2), This will convert 1 to 0, 2 to 1, 4 to 2, 8 to 3, and 16 to 4.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FRealtimeMeshLODKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LODKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FRealtimeMeshLODKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LODMultiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GeneratedRealtimeMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateMeshSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LODKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FRealtimeMeshSectionConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERealtimeMeshSectionDrawType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LODMeshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;generating-lods-for-runtime-mesh-component&quot;&gt;Generating LODs for Runtime Mesh Component&lt;/h3&gt;

&lt;p&gt;The RMC supports LODs. It can generate LODs for the mesh at runtime. It can also generate LODs for the mesh in the editor. The LODs are generated by setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRealtimeMeshLODKey&lt;/code&gt; while setting mesh section data. So if you want to generate LODs for your mesh, you will have to generate the mesh for each LOD. The LODs are generated using the following function:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AThTerrain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateMeshChunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandHeightMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FThTerrainChunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;URealtimeMeshSimple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GeneratedMesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;
	        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MeshComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InitializeRealtimeMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URealtimeMeshSimple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GeneratedRealtimeMesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GeneratedMesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LODs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;FIntPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandCellSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandCellSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MeshComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetRelativeLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;FVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IslandX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;GeneratedMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UpdateLODConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRealtimeMeshLODKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FRealtimeMeshLODConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CreateLOD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandHeightMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;GeneratedMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddLOD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRealtimeMeshLODConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CreateLOD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandHeightMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;GeneratedMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddLOD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRealtimeMeshLODConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CreateLOD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IslandHeightMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;//CreateLOD(8, IslandHeightMap, Chunk);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FRealtimeMeshLODConfig&lt;/code&gt; set’s the desired screensize for the LOD. The range of the variable is usually 0 to 1, for 1 being entire screen
Since LOD 0 already exists, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UpdateLODConfig&lt;/code&gt; to set it’s screen size (although optional, as it’s visible by default), for rest of the LODs we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AddLOD&lt;/code&gt; to add them to the mesh.&lt;/p&gt;

&lt;p&gt;Each RealtimeMeshComponent can have 1-8 Levels of Detail or LODs, each of which can have any number of section groups, each of which can have any number of sections. Each LOD is separate from the others, and so can have different numbers of sections and different materials bound to those sections.&lt;/p&gt;

&lt;p&gt;Each LOD has a ScreenSize associated to it. This is the percent of the screen the bounding volume has to cover before this LOD is rendered.&lt;/p&gt;</content><author><name>Prajwal Shetty</name><email>mail@prajwalshetty.com</email></author><category term="UE5" /><category term="game" /><category term="unreal-engine" /><category term="graphics" /><summary type="html">Deploying a Unity Linux game server on the Microsoft Azure PlayFab service is a great way to host your multiplayer game and manage player data. With Azure PlayFab, game developers can leverage cloud-based infrastructure and services to scale their games and provide an optimal experience for players. In this guide, we will take you through the steps involved in deploying your Unity Linux game server on the PlayFab service, all at no cost.</summary></entry><entry><title type="html">About this site</title><link href="http://localhost:4000/About-this-site/" rel="alternate" type="text/html" title="About this site" /><published>2023-02-15T00:00:00+00:00</published><updated>2023-02-15T00:00:00+00:00</updated><id>http://localhost:4000/About%20this%20site</id><content type="html" xml:base="http://localhost:4000/About-this-site/">&lt;p&gt;Welcome to my personal blog! My name is Prajwal Shetty, and I’m a game developer with 5 years of experience in the industry. I specialize in game programming and 3D math, with expertise in Unity, Unreal Engine 5, and Blender Python API.&lt;/p&gt;

&lt;p&gt;I have a particular interest in open-world games and virtual worlds, and I love creating immersive experiences that transport players to new and exciting places. In my spare time, I enjoy staying up-to-date with the latest developments in technology and exploring new programming concepts.&lt;/p&gt;

&lt;p&gt;On this blog, I share my thoughts and insights on game development, programming, and tech. Whether you’re a fellow game developer, a tech enthusiast, or just someone looking for a good read, I hope you’ll find something of interest here.&lt;/p&gt;

&lt;p&gt;As well as my professional interests, I also have a passion for travel and exploring new places. You may find the occasional post about my adventures, and how they inspire my work.&lt;/p&gt;

&lt;p&gt;I love to write and believe that blogging is an excellent way to express my thoughts and ideas. I hope you’ll find my writing engaging, informative, and thought-provoking. Thanks for stopping by!&lt;/p&gt;

&lt;h3 id=&quot;tech-stack-used-to-build-this-site&quot;&gt;Tech stack used to build this site:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt; 
&lt;!-- {:target=&quot;_blank&quot;} opens the link in a new tab --&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot;&gt;Github pages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloudinary.com/&quot; target=&quot;_blank&quot;&gt;Cloudinary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://giscus.app/&quot; target=&quot;_blank&quot;&gt;Giscus.app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot; target=&quot;_blank&quot;&gt;Minimal Mistakes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://openai.com/blog/chatgpt/&quot; target=&quot;_blank&quot;&gt;ChatGpt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloudfare.com/&quot; target=&quot;_blank&quot;&gt;Cloudfare&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://domains.google/&quot; target=&quot;_blank&quot;&gt;Google Domains&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tools-used&quot;&gt;Tools used:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adobe.com/express/&quot; target=&quot;_blank&quot;&gt;Adobe Express&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.fotor.com/&quot; target=&quot;_blank&quot;&gt;Fotor.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://realfavicongenerator.net/&quot; target=&quot;_blank&quot;&gt;Realfavicongenerator.net&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.privacypolicies.com/&quot; target=&quot;_blank&quot;&gt;Privacypolicies.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;third-party-integrations&quot;&gt;Third party integrations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://analytics.google.com/analytics/web/&quot; target=&quot;_blank&quot;&gt;Google Analytics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dev-env&quot;&gt;Dev Env&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Windows 11&lt;/li&gt;
  &lt;li&gt;JetBrains Rider&lt;/li&gt;
  &lt;li&gt;Github (VC, Copilot, Actions)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Prajwal Shetty</name><email>mail@prajwalshetty.com</email></author><summary type="html">On this blog, I share my thoughts and insights on game development, programming, and tech. Whether you're a fellow game developer, a tech enthusiast, or just someone looking for a good read, I hope you'll find something of interest here.</summary></entry></feed>